// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole  @default(VOLUNTEER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts            Account[]
    sessions            Session[]
    volunteerProfile    VolunteerProfile?
    organizationProfile OrganizationProfile?
    eventRegistrations  EventRegistration[]
    volunteerHours      VolunteerHour[]
    donations           Donation[]
    sentMessages        Message[]            @relation("SentMessages")
    receivedMessages    Message[]            @relation("ReceivedMessages")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    VOLUNTEER
    ORGANIZATION
    ADMIN
}

model VolunteerProfile {
    id               String    @id @default(cuid())
    userId           String    @unique
    bio              String?   @db.Text
    skills           String?   @db.Text // JSON string of skills
    interests        String?   @db.Text // JSON string of interests
    location         String?
    availability     String?   @db.Text // JSON object with availability
    phone            String?
    dateOfBirth      DateTime?
    emergencyContact String?
    totalHours       Int       @default(0)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    volunteerHours VolunteerHour[]
}

model OrganizationProfile {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String
    description String?  @db.Text
    mission     String?  @db.Text
    website     String?
    phone       String?
    address     String?
    city        String?
    state       String?
    country     String?
    zipCode     String?
    logo        String?
    isVerified  Boolean  @default(false)
    taxId       String?
    foundedYear Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    events    Event[]
    donations Donation[]
}

model Event {
    id                String        @id @default(cuid())
    title             String
    description       String        @db.Text
    category          EventCategory
    location          String
    latitude          Float?
    longitude         Float?
    startDate         DateTime
    endDate           DateTime
    maxVolunteers     Int?
    currentVolunteers Int           @default(0)
    skills            String?       @db.Text // JSON string of required skills
    requirements      String?       @db.Text
    isRemote          Boolean       @default(false)
    isActive          Boolean       @default(true)
    image             String?
    organizationId    String
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt

    organization   OrganizationProfile @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    registrations  EventRegistration[]
    volunteerHours VolunteerHour[]
}

enum EventCategory {
    EDUCATION
    ENVIRONMENT
    ANIMAL_CARE
    DISASTER_RELIEF
    HEALTHCARE
    COMMUNITY_SERVICE
    YOUTH_DEVELOPMENT
    SENIOR_CARE
    HOMELESSNESS
    FOOD_SECURITY
    OTHER
}

model EventRegistration {
    id           String             @id @default(cuid())
    eventId      String
    userId       String
    status       RegistrationStatus @default(PENDING)
    registeredAt DateTime           @default(now())
    checkedInAt  DateTime?
    checkedOutAt DateTime?

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([eventId, userId])
}

enum RegistrationStatus {
    PENDING
    APPROVED
    REJECTED
    CANCELLED
}

model VolunteerHour {
    id          String   @id @default(cuid())
    eventId     String
    volunteerId String
    hours       Float
    date        DateTime
    description String?  @db.Text
    verified    Boolean  @default(false)
    verifiedBy  String?
    createdAt   DateTime @default(now())

    event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
    volunteer VolunteerProfile @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
    User      User?            @relation(fields: [userId], references: [id])
    userId    String?
}

model Donation {
    id                    String              @id @default(cuid())
    amount                Float
    currency              String              @default("USD")
    donorId               String
    organizationId        String
    type                  DonationType
    isRecurring           Boolean             @default(false)
    frequency             RecurringFrequency?
    stripePaymentIntentId String?
    status                DonationStatus      @default(PENDING)
    message               String?             @db.Text
    anonymous             Boolean             @default(false)
    createdAt             DateTime            @default(now())

    donor        User                @relation(fields: [donorId], references: [id], onDelete: Cascade)
    organization OrganizationProfile @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum DonationType {
    ONE_TIME
    RECURRING
}

enum DonationStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

enum RecurringFrequency {
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
}

model Message {
    id         String   @id @default(cuid())
    senderId   String
    receiverId String
    content    String   @db.Text
    isRead     Boolean  @default(false)
    createdAt  DateTime @default(now())

    sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}
